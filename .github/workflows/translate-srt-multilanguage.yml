name: üåê Translate SRT from Google Drive (Final Version)

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Ch·ªçn m√¥i tr∆∞·ªùng (ose, mep, dde)'
        required: true
        default: 'ose'
        type: choice
        options:
          - ose
          - mep
          - cdp
      folder_url:
        description: "Google Drive folder URL ch·ª©a file SRT g·ªëc"
        required: true
      source_srt_filename:
        description: "T√™n file SRT g·ªëc trong folder (v√≠ d·ª•: raw_cn.srt)"
        required: true
        default: "raw_cn.srt"
      languages:
        description: "Danh s√°ch ng√¥n ng·ªØ ƒë√≠ch, c√°ch nhau b·∫±ng d·∫•u ph·∫©y (v√≠ d·ª•: English, Vietnamese, Japanese)"
        required: true
        default: "English, Vietnamese, Japanese"
      model:
        description: 'Gemini model (v√≠ d·ª• gemini-2.5-pro)'
        required: false
        default: 'gemini-2.5-pro'
      thinking_budget:
        description: 'Thinking budget (-1 dynamic, 0 off, or positive int)'
        required: false
        default: '-1'

jobs:
  translate-and-upload:
    runs-on: ubuntu-latest
    # Khai b√°o output c·ªßa job n√†y, s·∫Ω ƒë∆∞·ª£c job 'notify' s·ª≠ d·ª•ng
    outputs:
      summary_message: ${{ steps.generate_summary.outputs.summary_message }}
    environment:
      name: ${{ inputs.env }}
    env:
      FOLDER_URL:       ${{ inputs.folder_url }}
      GG_REFRESH_TOKEN: ${{ secrets.GG_REFRESH_TOKEN }}
      YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
      GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai google-auth google-api-python-client

      - name: üìÇ Download source SRT from Drive
        id: download_srt
        run: |
          set -euo pipefail
          SOURCE_FILE="${{ inputs.source_srt_filename }}"
          python scripts/download_drive_folder_files.py "$SOURCE_FILE"
          
          if [ ! -f "input/$SOURCE_FILE" ]; then
            echo "::error::Failed to download $SOURCE_FILE from Google Drive."
            exit 1
          fi
          
          echo "SRT_PATH=input/$SOURCE_FILE" >> $GITHUB_ENV
          echo "SRT_BASE_NAME=$(basename "$SOURCE_FILE" .srt)" >> $GITHUB_ENV
          echo "Downloaded file:"
          ls -lh "input/$SOURCE_FILE"

      - name: üîÑ Translate for each language
        id: run_translations
        continue-on-error: true # Cho ph√©p job ti·∫øp t·ª•c ngay c·∫£ khi step n√†y th·∫•t b·∫°i
        run: |
          set -uo pipefail
          SUCCESSFUL_FILES=""
          SUCCESSFUL_LANGS=()
          FAILED_LANGS=()

          IFS=',' read -r -a LANG_ARRAY <<< "${{ inputs.languages }}"

          for lang_raw in "${LANG_ARRAY[@]}"; do
            lang=$(echo "$lang_raw" | xargs)
            echo "---"
            echo "üöÄ Starting translation to: '$lang'"
            
            SAFE_LANG=$(echo "$lang" | tr ' ' '_')
            OUT_PATH="output/${{ env.SRT_BASE_NAME }}.${SAFE_LANG}.srt"
            mkdir -p output

            if ! python scripts/translate_srt.py \
              --input "${{ env.SRT_PATH }}" \
              --language "$lang" \
              --output "$OUT_PATH" \
              --model "${{ inputs.model }}" \
              --thinking-budget "${{ inputs.thinking_budget }}"; then
              
              echo "::warning::Translation to '$lang' failed. Skipping this language."
              FAILED_LANGS+=("$lang")
            else
              echo "‚úÖ Translation to '$lang' succeeded. Output: $OUT_PATH"
              SUCCESSFUL_LANGS+=("$lang")
              SUCCESSFUL_FILES="$SUCCESSFUL_FILES $OUT_PATH"
            fi
          done

          echo "ALL_TRANSLATED_FILES=${SUCCESSFUL_FILES# }" >> $GITHUB_ENV
          
          # Xu·∫•t k·∫øt qu·∫£ th√¥ ra output c·ªßa step ƒë·ªÉ step sau s·ª≠ d·ª•ng
          echo "successful_langs=${SUCCESSFUL_LANGS[*]}" >> $GITHUB_OUTPUT
          echo "failed_langs=${FAILED_LANGS[*]}" >> $GITHUB_OUTPUT
          echo "total_langs=${#LANG_ARRAY[@]}" >> $GITHUB_OUTPUT

          # Tho√°t v·ªõi m√£ l·ªói n·∫øu c√≥ th·∫•t b·∫°i ƒë·ªÉ ƒë√°nh d·∫•u step n√†y l√† 'failed'
          if [ ${#FAILED_LANGS[@]} -ne 0 ]; then
            exit 1
          fi

      - name: üìù Generate summary message
        id: generate_summary
        if: always() # Lu√¥n ch·∫°y step n√†y, b·∫•t k·ªÉ step tr∆∞·ªõc th√†nh c√¥ng hay th·∫•t b·∫°i
        run: |
          # Nh·∫≠n output t·ª´ step tr∆∞·ªõc
          SUCCESSFUL_LANGS="${{ steps.run_translations.outputs.successful_langs }}"
          FAILED_LANGS="${{ steps.run_translations.outputs.failed_langs }}"
          TOTAL_LANGS="${{ steps.run_translations.outputs.total_langs }}"
          
          # Chuy·ªÉn chu·ªói th√†nh m·∫£ng ƒë·ªÉ ƒë·∫øm s·ªë ph·∫ßn t·ª≠
          read -r -a successful_array <<< "$SUCCESSFUL_LANGS"
          read -r -a failed_array <<< "$FAILED_LANGS"
          success_count=${#successful_array[@]}
          failed_count=${#failed_array[@]}
          
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SUMMARY_MESSAGE=""

          # T·∫°o th√¥ng b√°o ƒë·ªông
          if [ $failed_count -eq 0 ]; then
            SUMMARY_MESSAGE="‚úÖ **D·ªãch Thu·∫≠t Ho√†n T·∫•t** ‚úÖ\n\nT·∫•t c·∫£ $success_count ng√¥n ng·ªØ ƒë√£ ƒë∆∞·ª£c d·ªãch th√†nh c√¥ng!"
          elif [ $success_count -eq 0 ]; then
            SUMMARY_MESSAGE="‚ùå **D·ªãch Thu·∫≠t Th·∫•t B·∫°i** ‚ùå\n\nTo√†n b·ªô $failed_count ng√¥n ng·ªØ ƒë·ªÅu d·ªãch th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra log."
          else
            SUMMARY_MESSAGE="‚ö†Ô∏è **D·ªãch Thu·∫≠t Ho√†n T·∫•t (C√≥ L·ªói)** ‚ö†Ô∏è\n\n- *Th√†nh c√¥ng ($success_count/$TOTAL_LANGS)*: $SUCCESSFUL_LANGS.\n- *Th·∫•t b·∫°i ($failed_count/$TOTAL_LANGS)*: $FAILED_LANGS."
          fi
          
          SUMMARY_MESSAGE+="\n\n*Xem chi ti·∫øt t·∫°i*: [Link]($RUN_URL)"
          
          # Xu·∫•t th√¥ng b√°o ho√†n ch·ªânh ra output c·ªßa step n√†y
          echo "summary_message<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚òÅÔ∏è Upload all results to Drive
        run: |
          if [ -z "${{ env.ALL_TRANSLATED_FILES }}" ]; then
            echo "No files were successfully translated. Skipping upload."
          else
            echo "Uploading successfully translated files: ${{ env.ALL_TRANSLATED_FILES }}"
            export UPLOAD_FILES="${{ env.ALL_TRANSLATED_FILES }}"
            python scripts/upload_results_to_drive.py
          fi

      - name: üìú Show a preview of generated files
        run: |
          echo "‚úÖ Translation process completed."
          echo "Generated files:"
          ls -lhR output/
      - name: "üì© Notify"
        run: |
          export MESSAGE="${{ steps.generate_summary.outputs.summary_message }}"
          node scripts/send_telegram_message.js
