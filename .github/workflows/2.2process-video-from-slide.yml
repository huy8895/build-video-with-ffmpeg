name: 📀 Render Video & Upload From Slide

on:
  workflow_call:
    inputs:
      env:           { required: true,  type: string }
      folder_url:    { required: true,  type: string }
      video_number:  { required: true,  type: string }
  workflow_dispatch:
    inputs:
      env:          { description: 'Chọn môi trường (ose, mep, dde)', default: 'ose', type: choice, options: [ose, mep, dde] }
      video_number: { description: 'Video number', default: '0',     required: true }
      folder_url:   { description: 'Google Drive folder URL',        required: true }

jobs:
  render-video:
    name: "Video | ${{ inputs.env }} | #${{ inputs.video_number }}"
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}

    env:
      CHANNEL:         ${{ inputs.env }}
      FOLDER_URL:      ${{ inputs.folder_url }}
      VIDEO_NUMBER:    ${{ inputs.video_number }}
      CONFIG_JSON:     ${{ vars.CONFIG_JSON }}
      YT_CLIENT_ID:        ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET:    ${{ secrets.YT_CLIENT_SECRET }}
      YT_REFRESH_TOKEN:    ${{ secrets.YT_REFRESH_TOKEN }}
      GG_REFRESH_TOKEN:    ${{ secrets.GG_REFRESH_TOKEN }}
      TELEGRAM_BOT_TOKEN:  ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:    ${{ secrets.TELEGRAM_CHAT_ID }}
      YOUTUBE_META_JSON:   ${{ vars.YOUTUBE_META_JSON }}

    steps:
      - uses: actions/checkout@v4
      - name: 🏁 Tạo link đến workflow run
        run: |
          echo "RUN_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: "📩 Notify: Start render"
        run: |
          export MESSAGE="▶️ [$CHANNEL] Video #$VIDEO_NUMBER: Bắt đầu RENDER & UPLOAD 🎬 | 🔗 View run: $RUN_URL"
          node scripts/send_telegram_message.js

      # ───────────────────────────────────────────────────────────
      # 1. Parse CONFIG_JSON (giữ lại toàn bộ biến video)
      # ───────────────────────────────────────────────────────────
      - name: ✅ Validate CONFIG_JSON
        run: |
          echo "$CONFIG_JSON" > config.json
          if ! jq -e '(.dpi and .resolution and .config_key and .maxChar and .minChar and .matchThreshold and .maxOffset)' config.json > /dev/null; then
            echo "❌ CONFIG_JSON thiếu trường!" && exit 1
          fi

      - name: 🤖 Parse CONFIG_JSON ⇒ env
        run: |
          echo "$CONFIG_JSON" > config.json
          echo "DPI=$(jq -r '.dpi'           config.json)" >> $GITHUB_ENV
          echo "RESOLUTION=$(jq -r '.resolution' config.json)" >> $GITHUB_ENV
          echo "CONFIG_KEY=$(jq -r '.config_key' config.json)" >> $GITHUB_ENV
          echo "MAX_CHAR=$(jq -r '.maxChar'  config.json)" >> $GITHUB_ENV
          echo "MIN_CHAR=$(jq -r '.minChar'  config.json)" >> $GITHUB_ENV
          echo "MATCH_THRESHOLD=$(jq -r '.matchThreshold' config.json)" >> $GITHUB_ENV
          echo "MAX_OFFSET=$(jq -r '.maxOffset' config.json)" >> $GITHUB_ENV
          # Cho phép tắt/bật upload tuỳ file JSON
          echo "UPLOAD_TO_YOUTUBE=$(jq -r '.upload_to_youtube' config.json)" >> $GITHUB_ENV
          echo "UPLOAD_VIDEO_TO_DRIVE=$(jq -r '.upload_video_to_drive' config.json)" >> $GITHUB_ENV

      # ───────────────────────────────────────────────────────────
      # 2. Cài deps & tải file (đã có slides.pptx)
      # ───────────────────────────────────────────────────────────
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: 📦 Install Node + Python + system deps
        run: |
          npm install fs-extra minimist compromise googleapis
          pip install --upgrade google-api-python-client google-auth google-auth-oauthlib
          sudo apt-get update
          sudo apt-get install -y libreoffice poppler-utils ffmpeg
      - name: "🌟 Install font"
        run: |
          mkdir -p ~/.fonts && cp assets/fonts/*.ttf ~/.fonts/ && fc-cache -f -v

      - name: 📂 Download files (slides + audio + timing + background)
        run: |
          python scripts/download_drive_folder_files.py slides.pptx transcript.srt audio_adjusted.mp3 background.jpg timings.json
          ls -lh input/
          cp input/* . || true

      # Nếu cần build timing lại (thường không cần)
      # - name: 🧠 Generate timing (tuỳ chọn) …

      # ───────────────────────────────────────────────────────────
      # 3. Convert & render
      # ───────────────────────────────────────────────────────────
      - name: 📄 Convert PPTX → PDF
        run: |
          mkdir -p slides_pdf
          soffice --headless --convert-to pdf --outdir slides_pdf slides.pptx

      - name: 🖼 PDF → PNG
        run: |
          mkdir -p slides_png
          pdftoppm -png -r "$DPI" slides_pdf/slides.pdf slides_png/slide

      - name: 📝 Build input.txt
        run: IMAGES_DIR=slides_png node scripts/build_input_list.js

      - name: 🎞 Render video
        run: |
          case "$RESOLUTION" in
            "720p")  SIZE="1280:720" ;;
            "1080p") SIZE="1920:1080" ;;
            *)       SIZE="854:480"  ;;
          esac
          ffmpeg -y -f concat -safe 0 -i input.txt -i audio_adjusted.mp3 \
            -vf "scale=$SIZE,format=yuv420p" \
            -c:v libx264 -preset slow -crf 18 \
            -c:a aac -b:a 320k -shortest output.mp4

      # ───────────────────────────────────────────────────────────
      # 4. Upload Drive / YouTube + Notify
      # ───────────────────────────────────────────────────────────
      - name: ☁️ Upload VIDEO to Drive
        if: ${{ env.UPLOAD_VIDEO_TO_DRIVE == 'true' }}
        run: |
          export UPLOAD_FILES="output.mp4"
          python scripts/upload_results_to_drive.py

      - name: 🚀 Upload YouTube
        if: ${{ env.UPLOAD_TO_YOUTUBE == 'true' }}
        run: python scripts/upload_youtube.py

      - name: 📩 Notify success
        if: ${{ env.UPLOAD_TO_YOUTUBE == 'true' }}
        run: |
          YT_LINK=$(cat yt_link.txt)
          export MESSAGE="🎉 [$CHANNEL] Video #$VIDEO_NUMBER đã upload! 👉 $YT_LINK | 🔗 View run: $RUN_URL"
          node scripts/send_telegram_message.js

      - name: 📛 Notify failure
        if: failure()
        run: |
          export MESSAGE="❌ Render/Upload FAILED – [$CHANNEL] #$VIDEO_NUMBER | $FOLDER_URL | 🔗 View run: $RUN_URL"
          node scripts/send_telegram_message.js
