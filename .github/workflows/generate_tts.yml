name: üéôÔ∏è Generate Multi-Speaker Audio (TTS)

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Ch·ªçn m√¥i tr∆∞·ªùng (ose, mep, dde)'
        required: true
        default: 'ose'
        type: choice
        options:
          - ose
          - mep
          - cdp
      output_filename:
        description: "T√™n file √¢m thanh ƒë·∫ßu ra (v√≠ d·ª•: my_dialog.wav)"
        required: true
        default: "generated_audio.wav"
      text_to_speak:
        description: "N·ªôi dung vƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i (h·ªó
 tr·ª£ nhi·ªÅu d√≤ng)"
        required: true
        type: string
        default: |
          Speaker 1: Hello! We're excited to show you our native speech capabilities.
          Speaker 2: Where you can direct a voice, create realistic dialog, and so much more.
      # ----- THAY ƒê·ªîI 1: C·∫≠p nh·∫≠t description v√† default value -----
      speaker_mappings:
        description: "√Ånh x·∫° Ng∆∞·ªùi n√≥i v·ªõi Gi·ªçng n√≥i, c√°ch nhau b·∫±ng d·∫•u ph·∫©y"
        required: true
        type: string
        default: "Speaker 1:Zephyr, Speaker 2:Puck"
      upload_folder_url:
        description: "URL c·ªßa th∆∞ m·ª•c Google Drive ƒë·ªÉ t·∫£i file √¢m thanh l√™n"
        required: false

jobs:
  generate-and-upload-audio:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}
    env:
      GG_REFRESH_TOKEN: ${{ secrets.GG_REFRESH_TOKEN }}
      YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
      GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      UPLOAD_FOLDER_URL: ${{ inputs.upload_folder_url }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai google-auth google-api-python-client

      - name: üîä Generate Audio File
        id: generate_tts
        run: |
          set -e
          echo "B·∫Øt ƒë·∫ßu t·∫°o file √¢m thanh..."
          mkdir -p output
          
          OUTPUT_PATH="output/${{ inputs.output_filename }}"
          
          # ----- S·ª¨A L·ªñI: S·ª≠ d·ª•ng m·∫£ng ƒë·ªÉ l∆∞u c√°c ƒë·ªëi s·ªë -----
          # Kh·ªüi t·∫°o m·ªôt m·∫£ng r·ªóng
          SPEAKER_ARGS_ARRAY=()
          
          # Thay th·∫ø d·∫•u ph·∫©y b·∫±ng k√Ω t·ª± d√≤ng m·ªõi
          MAPPINGS_AS_LINES=$(echo "${{ inputs.speaker_mappings }}" | tr ',' '\n')
          
          while IFS= read -r mapping; do
            trimmed_mapping=$(echo "$mapping" | xargs)
            if [ -n "$trimmed_mapping" ]; then
              # Th√™m --speaker l√†m m·ªôt ph·∫ßn t·ª≠
              SPEAKER_ARGS_ARRAY+=(--speaker)
              # Th√™m gi√° tr·ªã c·ªßa n√≥ l√†m m·ªôt ph·∫ßn t·ª≠ ri√™ng bi·ªát
              SPEAKER_ARGS_ARRAY+=("$trimmed_mapping")
            fi
          done <<< "$MAPPINGS_AS_LINES"
          
          # In ra l·ªánh s·∫Ω ch·∫°y ƒë·ªÉ debug (ch·ªâ ƒë·ªÉ xem)
          echo "L·ªánh s·∫Ω ƒë∆∞·ª£c th·ª±c thi (v·ªõi c√°c ƒë·ªëi s·ªë ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng c√°ch):"
          # D√πng printf ƒë·ªÉ hi·ªÉn th·ªã t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng m·ªôt c√°ch an to√†n
          printf "%q " python scripts/create_tts.py --output "$OUTPUT_PATH" --text "${{ inputs.text_to_speak }}" "${SPEAKER_ARGS_ARRAY[@]}"
          echo # In m·ªôt d√≤ng m·ªõi cho ƒë·∫πp
          
          # Ch·∫°y script Python v·ªõi c√°c ƒë·ªëi s·ªë t·ª´ m·∫£ng
          # C√∫ ph√°p "${ARRAY[@]}" ƒë·∫£m b·∫£o m·ªói ph·∫ßn t·ª≠ trong m·∫£ng ƒë∆∞·ª£c coi l√† m·ªôt ƒë·ªëi s·ªë ri√™ng bi·ªát
          python scripts/create_tts.py \
            --output "$OUTPUT_PATH" \
            --text "${{ inputs.text_to_speak }}" \
            "${SPEAKER_ARGS_ARRAY[@]}"
          
          if [ ! -f "$OUTPUT_PATH" ]; then
            echo "::error::T·∫°o file √¢m thanh th·∫•t b·∫°i. File kh√¥ng t·ªìn t·∫°i."
            exit 1
          fi
          
          echo "‚úÖ ƒê√£ t·∫°o file √¢m thanh th√†nh c√¥ng: $OUTPUT_PATH"
          echo "output_path=$OUTPUT_PATH" >> $GITHUB_OUTPUT
      # ... C√°c steps c√≤n l·∫°i gi·ªØ nguy√™n ...

      - name: üìù Generate summary message
        id: generate_summary
        if: always()
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SUMMARY_MESSAGE=""
          
          if [ "${{ steps.generate_tts.outcome }}" == "success" ]; then
            SUMMARY_MESSAGE="‚úÖ **T·∫°o √Çm Thanh Ho√†n T·∫•t** ‚úÖ\n\nFile *${{ inputs.output_filename }}* ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng."
          else
            SUMMARY_MESSAGE="‚ùå **T·∫°o √Çm Thanh Th·∫•t B·∫°i** ‚ùå\n\nVui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt."
          fi
          
          SUMMARY_MESSAGE+="\n\n*Xem chi ti·∫øt t·∫°i*: [Link]($RUN_URL)"
          
          echo "summary_message<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚òÅÔ∏è Upload result to Drive
        if: success() && inputs.upload_folder_url != ''
        run: |
          echo "ƒêang t·∫£i file ${{ steps.generate_tts.outputs.output_path }} l√™n Google Drive..."
          export UPLOAD_FILES="${{ steps.generate_tts.outputs.output_path }}"
          python scripts/upload_results_to_drive.py

      - name: üìú Show a preview of generated file
        if: success()
        run: |
          echo "File ƒë√£ t·∫°o:"
          ls -lh output/
          
      - name: "üì© Notify via Telegram"
        if: always()
        run: |
          export MESSAGE="${{ steps.generate_summary.outputs.summary_message }}"
          node scripts/send_telegram_message.js