name: üéôÔ∏è Generate Multi-Speaker Audio (TTS)

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Ch·ªçn m√¥i tr∆∞·ªùng (ose, mep, dde)'
        required: true
        default: 'ose'
        type: choice
        options:
          - ose
          - mep
          - cdp
      output_filename:
        description: "T√™n file √¢m thanh ƒë·∫ßu ra (v√≠ d·ª•: my_dialog.wav)"
        required: true
        default: "generated_audio.wav"
      text_to_speak:
        description: "N·ªôi dung vƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i (h·ªó tr·ª£ nhi·ªÅu d√≤ng)"
        required: true
        type: string # 'string' s·∫Ω hi·ªÉn th·ªã m·ªôt √¥ nh·∫≠p text l·ªõn h∆°n
        default: |
          Speaker 1: Hello! We're excited to show you our native speech capabilities.
          Speaker 2: Where you can direct a voice, create realistic dialog, and so much more.
      speaker_mappings:
        description: "√Ånh x·∫° Ng∆∞·ªùi n√≥i v·ªõi Gi·ªçng n√≥i (m·ªói d√≤ng m·ªôt mapping)"
        required: true
        type: string
        default: |
          Speaker 1:Zephyr
          Speaker 2:Puck
      upload_folder_url:
        description: "URL c·ªßa th∆∞ m·ª•c Google Drive ƒë·ªÉ t·∫£i file √¢m thanh l√™n"
        required: false

jobs:
  generate-and-upload-audio:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}
    env:
      # Secrets cho Google Drive, Gemini v√† Telegram
      GG_REFRESH_TOKEN: ${{ secrets.GG_REFRESH_TOKEN }}
      YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
      GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      
      # Bi·∫øn t·ª´ inputs ƒë·ªÉ d√πng trong c√°c steps
      UPLOAD_FOLDER_URL: ${{ inputs.upload_folder_url }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai google-auth google-api-python-client

      - name: üîä Generate Audio File
        id: generate_tts
        run: |
          set -e
          echo "B·∫Øt ƒë·∫ßu t·∫°o file √¢m thanh..."
          mkdir -p output
          
          OUTPUT_PATH="output/${{ inputs.output_filename }}"
          
          # X√¢y d·ª±ng c√°c tham s·ªë --speaker t·ª´ input nhi·ªÅu d√≤ng
          SPEAKER_ARGS=""
          while IFS= read -r line; do
            # B·ªè qua c√°c d√≤ng tr·ªëng
            if [ -n "$line" ]; then
              SPEAKER_ARGS+=" --speaker \"$line\""
            fi
          done <<< "${{ inputs.speaker_mappings }}"

          # In ra l·ªánh s·∫Ω ch·∫°y ƒë·ªÉ debug
          echo "L·ªánh s·∫Ω ƒë∆∞·ª£c th·ª±c thi:"
          echo "python scripts/create_tts.py --output \"$OUTPUT_PATH\" --text \"${{ inputs.text_to_speak }}\" $SPEAKER_ARGS"

          # Ch·∫°y script Python
          python scripts/create_tts.py \
            --output "$OUTPUT_PATH" \
            --text "${{ inputs.text_to_speak }}" \
            $SPEAKER_ARGS

          # Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng ch∆∞a
          if [ ! -f "$OUTPUT_PATH" ]; then
            echo "::error::T·∫°o file √¢m thanh th·∫•t b·∫°i. File kh√¥ng t·ªìn t·∫°i."
            exit 1
          fi

          echo "‚úÖ ƒê√£ t·∫°o file √¢m thanh th√†nh c√¥ng: $OUTPUT_PATH"
          echo "output_path=$OUTPUT_PATH" >> $GITHUB_OUTPUT

      - name: üìù Generate summary message
        id: generate_summary
        if: always() # Lu√¥n ch·∫°y step n√†y
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SUMMARY_MESSAGE=""
          
          if [ "${{ steps.generate_tts.outcome }}" == "success" ]; then
            SUMMARY_MESSAGE="‚úÖ **T·∫°o √Çm Thanh Ho√†n T·∫•t** ‚úÖ\n\nFile *${{ inputs.output_filename }}* ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng."
          else
            SUMMARY_MESSAGE="‚ùå **T·∫°o √Çm Thanh Th·∫•t B·∫°i** ‚ùå\n\nVui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt."
          fi
          
          SUMMARY_MESSAGE+="\n\n*Xem chi ti·∫øt t·∫°i*: [Link]($RUN_URL)"
          
          echo "summary_message<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚òÅÔ∏è Upload result to Drive
        if: success() && inputs.upload_folder_url != ''
        run: |
          echo "ƒêang t·∫£i file ${{ steps.generate_tts.outputs.output_path }} l√™n Google Drive..."
          # Gi·∫£ ƒë·ªãnh b·∫°n c√≥ script `upload_results_to_drive.py` c√≥ th·ªÉ x·ª≠ l√Ω vi·ªác n√†y
          # B·∫°n c·∫ßn ch·ªânh s·ª≠a script n√†y ƒë·ªÉ nh·∫≠n m·ªôt file thay v√¨ nhi·ªÅu file
          export UPLOAD_FILES="${{ steps.generate_tts.outputs.output_path }}"
          python scripts/upload_results_to_drive.py

      - name: üìú Show a preview of generated file
        if: success()
        run: |
          echo "File ƒë√£ t·∫°o:"
          ls -lh output/
          
      - name: "üì© Notify via Telegram"
        if: always()
        run: |
          # Gi·∫£ ƒë·ªãnh b·∫°n c√≥ script `send_telegram_message.js`
          export MESSAGE="${{ steps.generate_summary.outputs.summary_message }}"
          node scripts/send_telegram_message.js