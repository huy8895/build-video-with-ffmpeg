name: üßê Verify Transcript Alignment

on:
  workflow_call:
    inputs:
      env:          { required: true,  type: string }
      folder_url:   { required: true,  type: string }
      video_number: { required: true,  type: string }
  workflow_dispatch:
    inputs:
      env:
        description: "Ch·ªçn m√¥i tr∆∞·ªùng"
        required: true
        default: "cdp"
        type: choice
        options: [ose, mep, dde, cdp]
      video_number:
        description: "Video number"
        required: true
        default: "0"
      folder_url:
        description: "Google Drive folder URL ch·ª©a transcript.srt & content.txt"
        required: true

jobs:
  verify:
    name: "Verify | ${{ inputs.env }} | #${{ inputs.video_number }}"
    runs-on: ubuntu-latest

    ### ==== ENV chung (gi·ªëng WF c≈© ƒë·ªÉ t√°i-d√πng script Python) ====
    env:
      CHANNEL:            ${{ inputs.env }}
      FOLDER_URL:         ${{ inputs.folder_url }}
      VIDEO_NUMBER:       ${{ inputs.video_number }}
      GG_REFRESH_TOKEN:   ${{ secrets.GG_REFRESH_TOKEN }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
      YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
      YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}

    steps:
    # 1. L·∫•y code repo (ƒë√£ c√≥ scripts/download_drive_folder_files.py & upload_results_to_drive.py)
    - name: üì• Checkout source code
      uses: actions/checkout@v4

    # 2. (Tu·ª≥ ch·ªçn) g·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
    - name: üîî Notify start
      run: |
        export MESSAGE="üèÅ Start Align Check | [$CHANNEL] Video #$VIDEO_NUMBER"
        node scripts/send_telegram_message.js || true
      env:
        CONFIG_EMAIL: ${{ vars.CONFIG_EMAIL }}

    # 3. C√†i Python packages cho Google Drive API
    - name: üêç Install Google API packages
      run: pip install --quiet google-auth google-api-python-client

    # 4. T·∫£i transcript.srt & content.txt v·ªÅ th∆∞ m·ª•c input/
    - name: ‚¨áÔ∏è Download transcript.srt & content.txt
      run: |
        python scripts/download_drive_folder_files.py transcript.srt content.txt
      env:
        # script t·ª± l·∫•y GG_REFRESH_TOKEN trong env
        GG_REFRESH_TOKEN: ${{ secrets.GG_REFRESH_TOKEN }}

    # 5. C√†i node deps (string-similarity) & ch·∫°y script align_srt_to_content.js
    - name: üõ†Ô∏è Install Node dependencies
      run: |
        npm install string-similarity csv-stringify

    - name: üìä Align SRT ‚Üí content & export CSV
      run: |
        node scripts/align_srt_to_content.js \
             --srt input/transcript.srt \
             --content input/content.txt \
             --out alignment_result.csv \
             --threshold 0.85

    # 6. Upload CSV l√™n Google Drive c√πng folder
    - name: ‚òÅÔ∏è Upload alignment_result.csv l√™n Google Drive
      run: |
        export UPLOAD_FILES="alignment_result.csv"
        python scripts/upload_results_to_drive.py

    # 7. Th√¥ng b√°o ho√†n t·∫•t
    - name: ‚úÖ Notify success
      if: success()
      run: |
        export MESSAGE="‚úÖ Done Align Check | [$CHANNEL] Video #$VIDEO_NUMBER"
        node scripts/send_telegram_message.js || true
      env:
        CONFIG_EMAIL: ${{ vars.CONFIG_EMAIL }}

    # 8. Th√¥ng b√°o khi l·ªói
    - name: ‚ùå Notify failure
      if: failure()
      run: |
        export MESSAGE="‚ùå Align Check FAILED | [$CHANNEL] Video #$VIDEO_NUMBER"
        node scripts/send_telegram_message.js || true
      env:
        CONFIG_EMAIL: ${{ vars.CONFIG_EMAIL }}
